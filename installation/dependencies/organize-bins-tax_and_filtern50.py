#!/usr/bin/python
###################################################################
#Script Name	: organize-bins-tax.pu                                                                                        
#Description	: This scrip takes as input 1) a taxonomy file generated by GTDB, 2) a folder containing bins with .fa extension and 3) a output folder where tax clusters will dumped.                                                                                                                     
#Author       	: Rodolfo Brizola Toscan  - https://www.ufz.de/index.php?en=43568                                            
#Email         	: rodolfo.toscan@ufz.de                                           
###################################################################

import os
import sys


def select_bin(bins):
	print '######################### SELECT BINS'
	for bin in bins:
		print bin

taxonomy_file=sys.argv[1]
n50_file=sys.argv[2]
bins_folder=sys.argv[3]
output_folder=sys.argv[4]

# example
#taxonomy_file="/gpfs1/data/msb/PROJECTS/CLUETERRA/PROK/specdiff/CLUETERRA_and_CATALOG_taxonomy.tsv"
#bins_folder="/gpfs1/data/msb/PROJECTS/CLUETERRA/PROK/specdiff/bins_CLUETERRA-and-CATALOG"
#output_folder="/gpfs1/data/msb/PROJECTS/CLUETERRA/PROK/specdiff/TAX_CLU"
#n50_file="/gpfs1/data/msb/PROJECTS/CLUETERRA/PROK/specdiff/CLUETERRA_and_CATALOG-bbtools.tsv"



### 1 get bins with same taxonomy and dump inside dictionary
f=open(taxonomy_file,"r")
cluster_dic={}
while True:					# open and read file
    l=f.readline()			# for each line, if its a bin (to skip the header)
    if not l: break			# get the taxonomy and put in a dictionary
    else:
        
        #if "bin" in l or "Bin" in l:				# key = taxonomy
        if 1==1:				# key = taxonomy
            info=l.split("\t")			# value = bins
            bin,tax=info[0],info[1]
            if tax not in cluster_dic:
                cluster_dic[tax]=[bin]
            else:
                cluster_dic[tax].append(bin) 	# put on the same key, bins with same taxonomy	
f.close()

print "length tax dictionary:",len(cluster_dic)
c=0
for k,v in cluster_dic.iteritems():
	c=c+len(v)
print "number of bins inside dic",c
print 'step 1/4'


### 2 create output folders
if os.path.isdir(output_folder) == False:
    os.system("mkdir -p "+output_folder)
os.system("mkdir -p "+output_folder+"/unique_tax")
print 'step 2/4'


### 3 get n50 values!
f=open(n50_file,"r")
n50_dic={}
while True:
	l=f.readline()
	if not l: break
	else:
		bin,n50=l.split("\t")
		n50_dic[bin]=[int(n50)]
f.close()
print "length n50 dictionary:",len(n50_dic)
#sys.exit(0)


### 4 for each key of the tax dic, copy belonging to a new folder inside the outputfolder
c=1
for tax,bins in cluster_dic.iteritems():    
    #print tax,bins
    if len(bins) == 1:
		if os.path.isfile(bins_folder+"/"+bins[0]+".fa") == True:      						 # CASE 1: if only 1 bin has a given taxonomy
				#os.system("cp "+bins_folder+"/"+bins[0]+".fa "+output_folder+"/unique_tax") # dump it inside the unique-tax folder
			pass
    else:                                                                       # CASE 2: if more than 1 bin has a given taxonomy
        #f=open(output_folder+"/cluster-"+str(c)+"/taxonomy","w")
        #f.write(tax)
        #f.close()
	#print 'len bins:',len(bins)
	n50_good_bins=[]
	for bin in bins:
		n50=int(str(n50_dic[bin]).replace("[","").replace("]",""))	# check n50
		if n50>=10:													# if n50 >=10, keep it
			n50_good_bins.append(bin)

	#print 'len good bins:',len(n50_good_bins)

	if  len(n50_good_bins) == 0:					# if no bin within a tax. cluster has n50>10
			#print bins								# select one as a representative  and dump inside unique taxonomy folder
			print "-----------------------------> alert!"	
			select_bin(bins)	

	else: # len(n50_good_bins) == 1:
		print 'OKAY!'
		for bin in n50_good_bins:
			pass
			#print bin
			#if os.path.isfile(bins_folder+"/"+bins[0]+".fa") == True:
			#	os.system("cp "+bins_folder+"/"+bin+".fa "+output_folder+"/cluster-"+str(c))
			#	c=c+1
		#if os.path.isfile(bins_folder+"/"+bins[0]+".fa") == True:
		#	pass
			#os.system("cp "+bins_folder+"/"+bins[0]+".fa "+output_folder+"/unique_tax")

	#print "---"	
        #os.system("mkdir "+output_folder+"/cluster-"+str(c))                        # create cluster-x folder 
    #    for bin in bins:                                                            # and dump all the bins inside
     #       if os.path.isfile(bins_folder+"/"+bin+".fa") == True: 
		#os.system("cp "+bins_folder+"/"+bin+".fa "+output_folder+"/cluster-"+str(c))
     #   	pass
	#c=c+1

print 'step 3/4'
print '\ndone!'


### finito tschuss
