#!/bin/bash

mudoger_lettering(){
echo -e "\n"
echo -e "\t███    ███ ██    ██ ██████   ██████   ██████  ███████ ██████  "
echo -e "\t████  ████ ██    ██ ██   ██ ██    ██ ██       ██      ██   ██ "
echo -e "\t██ ████ ██ ██    ██ ██   ██ ██    ██ ██   ███ █████   ██████  "
echo -e "\t██  ██  ██ ██    ██ ██   ██ ██    ██ ██    ██ ██      ██   ██ "
echo -e "\t██      ██  ██████  ██████   ██████   ██████  ███████ ██   ██ "                                                                                                                    
echo -e "\t\t\tMulti-Domain Genome Recovery"
echo -e "\t\t\t\tVersion 1.0.0\n\n"
}

help_message () {
        echo""
        echo "Mudoger v=$VERSION"
        echo "Usage: mudoger --module module_name --meta metadata_table.tsv -o output_folder [module_options]"
        echo ""
        echo "  preprocess              runs all steps from module 1 (read_qc, kmer memory prediction and assembly)"
        echo "          read_qc         explanation (only this submodule)"
        echo "          mem_pred   	explanation (only this submodule)"
        echo "          assembly	explanation (only this submodule)"
        
        echo "  prokaryotes              runs all steps from module 1 (read_qc, kmer mem prediction and assembly)"
        echo "          initial_binning       explanation (only this submodule)"
  
        echo "  viruses			runs all steps from module 1 (read_qc, kmer mem prediction and assembly)"
               
        echo "  eukaryotes		runs all steps from module 1 (read_qc, kmer mem prediction and assembly)"
     
        echo "  abundance_tables	runs all steps from module 1 (read_qc, kmer mem prediction and assembly)"
	echo "          BRAT type         can be --complete and --reduced (default: --reduced)"
    
        echo ""
        echo "  --help | -h		show this help message"
        echo "  --version | -v		show mudoger version"
        #echo "  --show-config		show where the mudoger configuration files are stored"
        echo "";}
  
mudoger_lettering

num_cores=20
megahit=""
metaspades=""
memory=""
running_location="$(pwd)"
brat_type="--reduced"

###################################### while
while true; do
	case "$1" in
		--module) active_module=$2; shift 2;;
		--meta) metadata_table=$2; shift 2;;
		-o) output_folder=$2; shift 2;;
		-t) num_cores=$2; shift 2;;
		-m) memory=$2; shift 2;;
		--metaspades) metaspades="--metaspades"; shift 1;;
		--complete) brat_type="--complete"; shift 1;;
		-h | --help) help_message; exit 1; shift 1;;
		--) help_message; exit 1; shift; break ;;
		*) break;;
	esac
done

#############################  

dependencies="$(echo "$(which mudoger)" | sed "s/bin\/mudoger/dependencies/g")"
bin="$(echo "$(which mudoger)" | sed "s/bin\/mudoger/dependencies/g")"

### check if there was any problem with metadata file
out="$(python "$dependencies"/mdcheck.py $metadata_table)"
echo -e "$out"
if [[ $out =~ "Closing" ]]; then
   echo -e "\n TIP: run \"mudoger -h\" for help "
   exit 0
fi
#############################
# if everything is okay, proceeds with asking user for output folder

mkdir -p "$output_folder"

config_path="$(which config.sh)"
source $config_path

if [ "$active_module" = preprocess ]; then

	echo mudoger preprocess ${@:2}
	module_script=mudoger-module-1.sh
	
        ###### loop around samples and run module 1
	aux="$(while read l ; do echo "$l" | cut -f1; done < "$metadata_table"  | tr '\t' '\n' | sort |  uniq)";
	for i in $aux; 
	do 
	r1="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_1.f')"; 
	r2="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_2.f')";
	bash -i $MUDOGER_CONDA_ENVIRONMENT_PATH/bin/$module_script --metaspades --skip-bmtagger -1 $r1 -2 $r2 -o $output_folder/$i -t $num_cores -m $memory;

	done
	
elif [ "$active_module" = prokaryotes ]; then

	echo mudoger prokaryotes ${@:2}
	module_script=mudoger-module-2.sh
	
        ###### loop around samples and run module 2
	aux="$(while read l ; do echo "$l" | cut -f1; done < "$metadata_table"  | tr '\t' '\n' | sort |  uniq)";
	for i in $aux; 
	do 
	r1="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_1.f')"; 
	r2="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_2.f')";
	bash -i $MUDOGER_CONDA_ENVIRONMENT_PATH/bin/$module_script -1 $r1 -2 $r2 -a $output_folder/$i/assembly/final_assembly.fasta -o $output_folder/$i -t $num_cores;
	
	done
	
	##################################### 
	# 1) GROUP ALL RESULTS FROM ALL LIBRARIES INTO ONE INFORMATIVE TABLE
	# TABLE HAS: BINNAME, LIBRARY, N50, L50, TAXONOMY, COMPLETENESS, CONTAMINATION
	# 2) RUN GOTUPICK AND LEAVE RESULTS INSIDE ~output/results/prokaryotes/gotupick
	# 3) prepare inputs for BRATS	
	
elif [ "$active_module" = viruses ]; then
	echo mudoger viruses ${@:2}
	module_script=mudoger-module-3.sh
        ###### loop around samples and run module 3
	aux="$(while read l ; do echo "$l" | cut -f1; done < "$metadata_table"  | tr '\t' '\n' | sort |  uniq)";
	for i in $aux; 
	do 
	r1="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_1.f')"; 
	r2="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_2.f')";
	bash -i $MUDOGER_CONDA_ENVIRONMENT_PATH/bin/$module_script -1 $r1 -2 $r2 -a $output_folder/$i/assembly/final_assembly.fasta -o $output_folder/$i -t $num_cores;

	done
elif [ "$active_module" = eukaryotes ]; then
	#Necessary inputs: assembly, outputfolder, fowar, rev reads
	echo mudoger eukaryotes ${@:2}
	module_script=mudoger-module-4.sh
        ###### loop around samples and run module 4
	aux="$(while read l ; do echo "$l" | cut -f1; done < "$metadata_table"  | tr '\t' '\n' | sort |  uniq)";
	for i in $aux; 
	do 
	r1="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_1.f')"; 
	r2="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_2.f')";
	bash -i $MUDOGER_CONDA_ENVIRONMENT_PATH/bin/$module_script -1 $r1 -2 $r2 -a $output_folder/$i/assembly/final_assembly.fasta -o $output_folder/$i -t $num_cores;

	done
else
        comm "Please select a proper module of MuDoGeR."
        help_message
        exit 1
fi

elif [ "$active_module" = abundance_tables ]; then
	#Necessary inputs: path to output folder containing all samples to be calculated abundance, cores
	echo mudoger abundance_tables ${@:2}
	module_script=mudoger-module-5.sh
	if [ "$brat_type" = "--complete" ]; then

		bash -i $MUDOGER_CONDA_ENVIRONMENT_PATH/bin/$module_script -o $output_folder -t $num_cores $brat_type;
	elif [ "$brat_type" = "--reduced" ]; then
		
		bash -i $MUDOGER_CONDA_ENVIRONMENT_PATH/bin/$module_script -o $output_folder -t $num_cores $brat_type;
	fi

else
        comm "Please select a proper module of MuDoGeR."
        help_message
        exit 1
fi
