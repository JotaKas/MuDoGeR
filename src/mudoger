#!/bin/bash

VERSION=1.0.1

mudoger_lettering(){
echo -e "\n"
echo -e "\t███    ███ ██    ██ ██████   ██████   ██████  ███████ ██████  "
echo -e "\t████  ████ ██    ██ ██   ██ ██    ██ ██       ██      ██   ██ "
echo -e "\t██ ████ ██ ██    ██ ██   ██ ██    ██ ██   ███ █████   ██████  "
echo -e "\t██  ██  ██ ██    ██ ██   ██ ██    ██ ██    ██ ██      ██   ██ "
echo -e "\t██      ██  ██████  ██████   ██████   ██████  ███████ ██   ██ "                                                                                                                    
echo -e "\t\t\tMulti-Domain Genome Recovery"
echo -e "\t\t\t\tVersion $VERSION\n\n"
}

help_message () {
        echo""
        echo "Mudoger v=$VERSION"
        echo "Usage: mudoger --module module_name --meta metadata_table.tsv -o output_folder [module_options]"
        echo ""
	echo "  --meta              		 Metadata table with your samples, as explained in the github documentation"
        echo "  --module preprocess              Run all steps from module 1 (read_qc, kmer memory prediction and assembly)"
        echo "  --module prokaryotes              Recovery of Prokaryotic Metagenome-Assembled Genomes"
  
        echo "  --module viruses		Recovery of Uncultivated Viral Genomes"
               
        echo "  --module eukaryotes		Recovery of Eukaryotic Metagenome-Assembled Genomes"
     
        echo "  --module abundance_tables	Abundance calculation"
	echo "          	type             can be --reduced (default) , --complete or --genes"
        echo "          	mapping_type	 can be --absolute-values (default), --coverage, and --relative-abundance"
    
        echo ""
        echo "  --help | -h		show this help message"
        echo "  --version | -v		show mudoger version"
        #echo "  --show-config		show where the mudoger configuration files are stored"
        echo "";}
  
mudoger_lettering

num_cores=20
megahit=""
metaspades=""
memory=""
running_location="$(pwd)"
brat_type=""
brat_abs=""
brat_cov=""
brat_relativ=""

###################################### while
while true; do
	case "$1" in
		--module) active_module=$2; shift 2;;
		--meta) metadata_table=$2; shift 2;;
		-o) output_folder=$2; shift 2;;
		-t) num_cores=$2; shift 2;;
		-m) memory=$2; shift 2;;
		--metaspades) metaspades="--metaspades"; shift 1;;
		--complete) brat_type="--complete"; shift 1;;
		--reduced) brat_type="--reduced"; shift 1;;
		--genes) brat_type="--genes"; shift 1;;
		--absolute-values) brat_abs="--absolute-values"; shift 1;; 
		--coverage) brat_cov="--coverage"; shift 1;; 
		--relative-abundance) brat_relativ="--relative-abundance"; shift 1;;
		-h | --help) help_message; exit 1; shift 1;;
		-v | --version) echo "$VERSION"; exit 1; shift 1;;
		--) help_message; exit 1; shift; break ;;
		*) break;;
	esac
done

#############################  

dependencies="$(echo "$(which mudoger)" | sed "s/bin\/mudoger/dependencies/g")"
bin="$(echo "$(which mudoger)" | sed "s/bin\/mudoger/dependencies/g")"

mkdir -p "$output_folder"

config_path="$(which config.sh)"
source $config_path

if [ "$active_module" = preprocess ]; then

	echo mudoger preprocess ${@:2}
	module_script=mudoger-module-1.sh
	
        ###### loop around samples and run module 1
	aux="$(while read l ; do echo "$l" | cut -f1; done < "$metadata_table"  | tr '\t' '\n' | sort |  uniq)";
	for i in $aux; 
	do 
	r1="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_1.f')"; 
	r2="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_2.f')";
	bash -i $MUDOGER_CONDA_ENVIRONMENT_PATH/bin/$module_script --metaspades --skip-bmtagger -1 $r1 -2 $r2 -o $output_folder/$i -t $num_cores -m $memory;

	done
	
elif [ "$active_module" = prokaryotes ]; then

	echo mudoger prokaryotes ${@:2}
	module_script=mudoger-module-2.sh
	
        ###### loop around samples and run module 2
	aux="$(while read l ; do echo "$l" | cut -f1; done < "$metadata_table"  | tr '\t' '\n' | sort |  uniq)";
	for i in $aux; 
	do 
	r1="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_1.f')"; 
	r2="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_2.f')";
	bash -i $MUDOGER_CONDA_ENVIRONMENT_PATH/bin/$module_script -1 $r1 -2 $r2 -a $output_folder/$i/assembly/final_assembly.fasta -o $output_folder/$i -t $num_cores;
	
	done
	
elif [ "$active_module" = viruses ]; then
	echo mudoger viruses ${@:2}
	module_script=mudoger-module-3.sh
        ###### loop around samples and run module 3
	aux="$(while read l ; do echo "$l" | cut -f1; done < "$metadata_table"  | tr '\t' '\n' | sort |  uniq)";
	for i in $aux; 
	do 
	r1="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_1.f')"; 
	r2="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_2.f')";
	bash -i $MUDOGER_CONDA_ENVIRONMENT_PATH/bin/$module_script -1 $r1 -2 $r2 -a $output_folder/$i/assembly/final_assembly.fasta -o $output_folder/$i -t $num_cores;

	done
elif [ "$active_module" = eukaryotes ]; then
	#Necessary inputs: assembly, outputfolder, fowar, rev reads
	echo mudoger eukaryotes ${@:2}
	module_script=mudoger-module-4.sh
        ###### loop around samples and run module 4
	aux="$(while read l ; do echo "$l" | cut -f1; done < "$metadata_table"  | tr '\t' '\n' | sort |  uniq)";
	for i in $aux; 
	do 
	r1="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_1.f')"; 
	r2="$(cat "$metadata_table" | awk -F '\t' '{ if ($1 == "'$i'") {print} }' | cut -f2 | grep '_2.f')";
	bash -i $MUDOGER_CONDA_ENVIRONMENT_PATH/bin/$module_script -1 $r1 -2 $r2 -a $output_folder/$i/assembly/final_assembly.fasta -o $output_folder/$i -t $num_cores;

	done
	
elif [ "$active_module" = abundance_tables ]; then
	#Necessary inputs: path to output folder containing all samples to be calculated abundance, cores
	echo mudoger abundance_tables ${@:2}
	module_script=mudoger-module-5.sh

	bash -i $MUDOGER_CONDA_ENVIRONMENT_PATH/bin/$module_script --meta $metadata_table -o $output_folder -t $num_cores $brat_type $brat_abs $brat_cov $brat_relativ;	
	
else
        comm "Please select a proper module of MuDoGeR."
        help_message
        exit 1


fi
